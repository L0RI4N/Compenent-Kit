{
  "env": {
      "browser": true,
      "es2021": true
  },
  "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:@typescript-eslint/recommended"
  ],
  "overrides": [
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
      "ecmaVersion": "latest",
      "sourceType": "module"
  },
  "plugins": [
      "react",
      "@typescript-eslint"
  ],
  "settings": {
      "react": {
        "version": "detect"
      }
  },
  "ignorePatterns": ["**/*.test.tsx"],
  "rules": {
      "camelcase": [
        "error",
        {
          "allow": [
            "^is_",
            "^on_",
            "^get_",
            "^on",
            "^is",
            "^get",
            "^st_",
            "^st"
          ]
        }
      ],
      "semi": [
        "error",
        "always"
      ],
      "semi-spacing": [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      "brace-style": [
        "error"
      ],
      "comma-spacing": [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      "comma-dangle": [
        "error",
        "never"
      ],
      "prefer-const": "off",
      "@typescript-eslint/no-inferrable-types": "off",
      "space-before-function-paren": [
        "error",
        "never"
      ],
      "quotes": [
        "error",
        "double",
        {
          "allowTemplateLiterals": true
        }
      ],
      "indent": [
        "error",
        2,
        {
          "ignoredNodes": [
            "JSXElement",
            "JSXOpeningElement"
          ]
        }
      ],
      "max-len": [
        "error",
        {
          "code": 80,
          "ignoreComments": true,
          "ignoreTrailingComments": true,
          "ignoreUrls": true,
          "ignorePattern": "^\\s*var\\s.+=\\s*require\\s*\\(",
          "ignoreStrings": true
        }
      ],
      "max-depth": [
        "error",
        4
      ],
      "max-nested-callbacks": [
        "error",
        3
      ],
      "@typescript-eslint/explicit-function-return-type": "error",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "function",
          "format": [
            "PascalCase",
            "camelCase"
          ]
        },
        {
          "selector": [
            "class",
            "interface"
          ],
          "format": [
            "PascalCase"
          ]
        }
      ]
    }
}
